## 1
name: Test and deploy

on:
  push:

## 2
jobs:
  ## 3
  unit_tests:
    needs: [setup-localproperties]

    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v2
      - run: cat local.properties
      - name: Unit tests
        run: ./gradlew test
  ## 4
  android_tests:
    needs: [setup-localproperties]
    runs-on: [ macos-latest ]
    steps:
      - uses: actions/checkout@v2

      - name: Instrumentation Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 27
          script: ./gradlew connectedAndroidTest

  build:
     needs: [ unit_tests, android_tests ]
     runs-on: ubuntu-latest
     steps:
       # 1
       - name: Checkout code
         uses: actions/checkout@v2

       # 2
       - name: Generate Release APK
         run: ./gradlew assembleRelease
       # 3
       - name: Sign APK
         uses: r0adkll/sign-android-release@v1
         # ID used to access action output
         id: sign_app
         with:
           releaseDirectory: app/build/outputs/apk/release
           signingKeyBase64: ${{ secrets.SIGNING_KEY }}
           alias: ${{ secrets.ALIAS }}
           keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
           keyPassword: ${{ secrets.KEY_PASSWORD }}
       # 4
       - uses: actions/upload-artifact@master
         with:
           name: release.apk
           path: ${{steps.sign_app.outputs.signedReleaseFile}}
       # 5
       - uses: actions/upload-artifact@master
         with:
           name: mapping.txt
           path: app/build/outputs/mapping/release/mapping.txt

  deploy-firebase:
    # 1
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      # 2
      - uses: actions/download-artifact@master
        with:
          name: release.apk
      #3
      - name: upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.FIREBASE_APP_ID}}
          token: ${{secrets.FIREBASE_TOKEN}}
          groups: QA
          file: app-release-unsigned-signed.apk

  setup-localproperties:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: gradle
      - name: Access MovieDB API Key
        env:
          apiKey: ${{ secrets.apiKey }}
        run: echo apiKey=\"$apiKey\"\ > ./local.properties

      - name: Access GoogleMaps API Key
        env:
          MAPS_API_KEY: ${{ secrets.MAPS_API_KEY }}
        run: echo MAPS_API_KEY=\"$MAPS_API_KEY\"\ > ./local.properties

      - name: Access Mpesa consumer Key
        env:
          CONSUMER_KEY: ${{ secrets.CONSUMER_KEY }}
        run: echo CONSUMER_KEY=\"$CONSUMER_KEY\"\ > ./local.properties

      - name: Access Mpesa consumer secret
        env:
          CONSUMER_SECRET: ${{ secrets.CONSUMER_SECRET }}
        run: echo CONSUMER_SECRET=\"$CONSUMER_SECRET\"\ > ./local.properties

      - name: Access Mpesa passkey
        env:
          PASSKEY: ${{ secrets.PASSKEY }}
        run: echo -e "\nPASSKEY=$PASSKEY" > ./local.properties

      - name: Access Google Functions callbackurl
        env:
          CALLBACK_URL: ${{ secrets.CALLBACK_URL }}
        run: echo -e "\nCALLBACK_URL=$CALLBACK_URL" >> ./local.properties

      - name: Access Mpesa BUSINESS_SHORT_CODE
        env:
          BUSINESS_SHORT_CODE: ${{ secrets.BUSINESS_SHORT_CODE }}
        run: echo -e BUSINESS_SHORT_CODE="$BUSINESS_SHORT_CODE" >> ./local.properties

      - run: cat local.properties
      - name: Check file exists
        id: local
        uses: juliangruber/read-file-action@v1
        with:
          path: ./local.properties
      - name: Echo local.properties
        run: echo "${{ steps.local.outputs.content }}"